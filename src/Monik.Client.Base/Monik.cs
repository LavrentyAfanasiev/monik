// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: monik.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Monik.Common {

  /// <summary>Holder for reflection information generated from monik.proto</summary>
  public static partial class MonikReflection {

    #region Descriptor
    /// <summary>File descriptor for monik.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonikReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgttb25pay5wcm90bxIMTW9uaWtQYWNrYWdlItYBCgVFdmVudBIPCgdjcmVh",
            "dGVkGAEgASgSEg4KBnNvdXJjZRgCIAEoCRIQCghpbnN0YW5jZRgDIAEoCRIl",
            "CgJrYRgEIAEoCzIXLk1vbmlrUGFja2FnZS5LZWVwQWxpdmVIABIfCgJsZxgF",
            "IAEoCzIRLk1vbmlrUGFja2FnZS5Mb2dIABInCgJwYxgGIAEoCzIZLk1vbmlr",
            "UGFja2FnZS5QZXJmQ291bnRlckgAEiIKAm1jGAcgASgLMhQuTW9uaWtQYWNr",
            "YWdlLk1ldHJpY0gAQgUKA21zZyIdCglLZWVwQWxpdmUSEAoIaW50ZXJ2YWwY",
            "ASABKA0ioQEKA0xvZxImCgVsZXZlbBgBIAEoDjIXLk1vbmlrUGFja2FnZS5M",
            "ZXZlbFR5cGUSLAoIc2V2ZXJpdHkYAiABKA4yGi5Nb25pa1BhY2thZ2UuU2V2",
            "ZXJpdHlUeXBlEigKBmZvcm1hdBgDIAEoDjIYLk1vbmlrUGFja2FnZS5Gb3Jt",
            "YXRUeXBlEgwKBGJvZHkYBCABKAkSDAoEdGFncxgFIAEoCSINCgtQZXJmQ291",
            "bnRlciJZCgZNZXRyaWMSDAoEbmFtZRgBIAEoCRIyCgthZ2dyZWdhdGlvbhgC",
            "IAEoDjIdLk1vbmlrUGFja2FnZS5BZ2dyZWdhdGlvblR5cGUSDQoFdmFsdWUY",
            "AyABKAEqQQoJTGV2ZWxUeXBlEgoKBlNZU1RFTRAAEg8KC0FQUExJQ0FUSU9O",
            "EAoSCQoFTE9HSUMQFBIMCghTRUNVUklUWRAeKkgKDFNldmVyaXR5VHlwZRIJ",
            "CgVGQVRBTBAAEgkKBUVSUk9SEAoSCwoHV0FSTklORxAUEggKBElORk8QHhIL",
            "CgdWRVJCT1NFECgqKgoKRm9ybWF0VHlwZRIJCgVQTEFJThAAEggKBEpTT04Q",
            "ChIHCgNYTUwQFCotCg9BZ2dyZWdhdGlvblR5cGUSDwoLQUNDVU1VTEFUT1IQ",
            "ABIJCgVHQVVHRRAKQg+qAgxNb25pay5Db21tb25iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Monik.Common.LevelType), typeof(global::Monik.Common.SeverityType), typeof(global::Monik.Common.FormatType), typeof(global::Monik.Common.AggregationType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Monik.Common.Event), global::Monik.Common.Event.Parser, new[]{ "Created", "Source", "Instance", "Ka", "Lg", "Pc", "Mc" }, new[]{ "Msg" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monik.Common.KeepAlive), global::Monik.Common.KeepAlive.Parser, new[]{ "Interval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monik.Common.Log), global::Monik.Common.Log.Parser, new[]{ "Level", "Severity", "Format", "Body", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monik.Common.PerfCounter), global::Monik.Common.PerfCounter.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monik.Common.Metric), global::Monik.Common.Metric.Parser, new[]{ "Name", "Aggregation", "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LevelType {
    [pbr::OriginalName("SYSTEM")] System = 0,
    [pbr::OriginalName("APPLICATION")] Application = 10,
    [pbr::OriginalName("LOGIC")] Logic = 20,
    [pbr::OriginalName("SECURITY")] Security = 30,
  }

  public enum SeverityType {
    [pbr::OriginalName("FATAL")] Fatal = 0,
    [pbr::OriginalName("ERROR")] Error = 10,
    [pbr::OriginalName("WARNING")] Warning = 20,
    [pbr::OriginalName("INFO")] Info = 30,
    [pbr::OriginalName("VERBOSE")] Verbose = 40,
  }

  public enum FormatType {
    [pbr::OriginalName("PLAIN")] Plain = 0,
    [pbr::OriginalName("JSON")] Json = 10,
    [pbr::OriginalName("XML")] Xml = 20,
  }

  public enum AggregationType {
    [pbr::OriginalName("ACCUMULATOR")] Accumulator = 0,
    /// <summary>
    /// TODO: UNIQUE VALUES COUNT IN WINDOW
    /// </summary>
    [pbr::OriginalName("GAUGE")] Gauge = 10,
  }

  #endregion

  #region Messages
  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monik.Common.MonikReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      created_ = other.created_;
      source_ = other.source_;
      instance_ = other.instance_;
      switch (other.MsgCase) {
        case MsgOneofCase.Ka:
          Ka = other.Ka.Clone();
          break;
        case MsgOneofCase.Lg:
          Lg = other.Lg.Clone();
          break;
        case MsgOneofCase.Pc:
          Pc = other.Pc.Clone();
          break;
        case MsgOneofCase.Mc:
          Mc = other.Mc.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 1;
    private long created_;
    /// <summary>
    /// milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private string source_ = "";
    /// <summary>
    /// Role Name, Application Name, Service Name, etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instance" field.</summary>
    public const int InstanceFieldNumber = 3;
    private string instance_ = "";
    /// <summary>
    /// Instance of the source
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Instance {
      get { return instance_; }
      set {
        instance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ka" field.</summary>
    public const int KaFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monik.Common.KeepAlive Ka {
      get { return msgCase_ == MsgOneofCase.Ka ? (global::Monik.Common.KeepAlive) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Ka;
      }
    }

    /// <summary>Field number for the "lg" field.</summary>
    public const int LgFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monik.Common.Log Lg {
      get { return msgCase_ == MsgOneofCase.Lg ? (global::Monik.Common.Log) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Lg;
      }
    }

    /// <summary>Field number for the "pc" field.</summary>
    public const int PcFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monik.Common.PerfCounter Pc {
      get { return msgCase_ == MsgOneofCase.Pc ? (global::Monik.Common.PerfCounter) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Pc;
      }
    }

    /// <summary>Field number for the "mc" field.</summary>
    public const int McFieldNumber = 7;
    /// <summary>
    /// TODO: need reserve for future extensions ??
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monik.Common.Metric Mc {
      get { return msgCase_ == MsgOneofCase.Mc ? (global::Monik.Common.Metric) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Mc;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      Ka = 4,
      Lg = 5,
      Pc = 6,
      Mc = 7,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Created != other.Created) return false;
      if (Source != other.Source) return false;
      if (Instance != other.Instance) return false;
      if (!object.Equals(Ka, other.Ka)) return false;
      if (!object.Equals(Lg, other.Lg)) return false;
      if (!object.Equals(Pc, other.Pc)) return false;
      if (!object.Equals(Mc, other.Mc)) return false;
      if (MsgCase != other.MsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Instance.Length != 0) hash ^= Instance.GetHashCode();
      if (msgCase_ == MsgOneofCase.Ka) hash ^= Ka.GetHashCode();
      if (msgCase_ == MsgOneofCase.Lg) hash ^= Lg.GetHashCode();
      if (msgCase_ == MsgOneofCase.Pc) hash ^= Pc.GetHashCode();
      if (msgCase_ == MsgOneofCase.Mc) hash ^= Mc.GetHashCode();
      hash ^= (int) msgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Created != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Created);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Source);
      }
      if (Instance.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Instance);
      }
      if (msgCase_ == MsgOneofCase.Ka) {
        output.WriteRawTag(34);
        output.WriteMessage(Ka);
      }
      if (msgCase_ == MsgOneofCase.Lg) {
        output.WriteRawTag(42);
        output.WriteMessage(Lg);
      }
      if (msgCase_ == MsgOneofCase.Pc) {
        output.WriteRawTag(50);
        output.WriteMessage(Pc);
      }
      if (msgCase_ == MsgOneofCase.Mc) {
        output.WriteRawTag(58);
        output.WriteMessage(Mc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Created);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Instance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Instance);
      }
      if (msgCase_ == MsgOneofCase.Ka) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ka);
      }
      if (msgCase_ == MsgOneofCase.Lg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lg);
      }
      if (msgCase_ == MsgOneofCase.Pc) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pc);
      }
      if (msgCase_ == MsgOneofCase.Mc) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Instance.Length != 0) {
        Instance = other.Instance;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.Ka:
          if (Ka == null) {
            Ka = new global::Monik.Common.KeepAlive();
          }
          Ka.MergeFrom(other.Ka);
          break;
        case MsgOneofCase.Lg:
          if (Lg == null) {
            Lg = new global::Monik.Common.Log();
          }
          Lg.MergeFrom(other.Lg);
          break;
        case MsgOneofCase.Pc:
          if (Pc == null) {
            Pc = new global::Monik.Common.PerfCounter();
          }
          Pc.MergeFrom(other.Pc);
          break;
        case MsgOneofCase.Mc:
          if (Mc == null) {
            Mc = new global::Monik.Common.Metric();
          }
          Mc.MergeFrom(other.Mc);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Created = input.ReadSInt64();
            break;
          }
          case 18: {
            Source = input.ReadString();
            break;
          }
          case 26: {
            Instance = input.ReadString();
            break;
          }
          case 34: {
            global::Monik.Common.KeepAlive subBuilder = new global::Monik.Common.KeepAlive();
            if (msgCase_ == MsgOneofCase.Ka) {
              subBuilder.MergeFrom(Ka);
            }
            input.ReadMessage(subBuilder);
            Ka = subBuilder;
            break;
          }
          case 42: {
            global::Monik.Common.Log subBuilder = new global::Monik.Common.Log();
            if (msgCase_ == MsgOneofCase.Lg) {
              subBuilder.MergeFrom(Lg);
            }
            input.ReadMessage(subBuilder);
            Lg = subBuilder;
            break;
          }
          case 50: {
            global::Monik.Common.PerfCounter subBuilder = new global::Monik.Common.PerfCounter();
            if (msgCase_ == MsgOneofCase.Pc) {
              subBuilder.MergeFrom(Pc);
            }
            input.ReadMessage(subBuilder);
            Pc = subBuilder;
            break;
          }
          case 58: {
            global::Monik.Common.Metric subBuilder = new global::Monik.Common.Metric();
            if (msgCase_ == MsgOneofCase.Mc) {
              subBuilder.MergeFrom(Mc);
            }
            input.ReadMessage(subBuilder);
            Mc = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeepAlive : pb::IMessage<KeepAlive> {
    private static readonly pb::MessageParser<KeepAlive> _parser = new pb::MessageParser<KeepAlive>(() => new KeepAlive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeepAlive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monik.Common.MonikReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAlive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAlive(KeepAlive other) : this() {
      interval_ = other.interval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAlive Clone() {
      return new KeepAlive(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private uint interval_;
    /// <summary>
    /// seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeepAlive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeepAlive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Interval != other.Interval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Interval != 0) hash ^= Interval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Interval != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Interval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Interval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Interval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeepAlive other) {
      if (other == null) {
        return;
      }
      if (other.Interval != 0) {
        Interval = other.Interval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Interval = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Log : pb::IMessage<Log> {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monik.Common.MonikReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      level_ = other.level_;
      severity_ = other.severity_;
      format_ = other.format_;
      body_ = other.body_;
      tags_ = other.tags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private global::Monik.Common.LevelType level_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monik.Common.LevelType Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 2;
    private global::Monik.Common.SeverityType severity_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monik.Common.SeverityType Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 3;
    private global::Monik.Common.FormatType format_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monik.Common.FormatType Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 4;
    private string body_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 5;
    private string tags_ = "";
    /// <summary>
    /// users tags or categories
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tags {
      get { return tags_; }
      set {
        tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Severity != other.Severity) return false;
      if (Format != other.Format) return false;
      if (Body != other.Body) return false;
      if (Tags != other.Tags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Severity != 0) hash ^= Severity.GetHashCode();
      if (Format != 0) hash ^= Format.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (Tags.Length != 0) hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Level);
      }
      if (Severity != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Severity);
      }
      if (Format != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Format);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Body);
      }
      if (Tags.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Tags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (Severity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      if (Format != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      if (Tags.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Severity != 0) {
        Severity = other.Severity;
      }
      if (other.Format != 0) {
        Format = other.Format;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      if (other.Tags.Length != 0) {
        Tags = other.Tags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            level_ = (global::Monik.Common.LevelType) input.ReadEnum();
            break;
          }
          case 16: {
            severity_ = (global::Monik.Common.SeverityType) input.ReadEnum();
            break;
          }
          case 24: {
            format_ = (global::Monik.Common.FormatType) input.ReadEnum();
            break;
          }
          case 34: {
            Body = input.ReadString();
            break;
          }
          case 42: {
            Tags = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO
  /// </summary>
  public sealed partial class PerfCounter : pb::IMessage<PerfCounter> {
    private static readonly pb::MessageParser<PerfCounter> _parser = new pb::MessageParser<PerfCounter>(() => new PerfCounter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PerfCounter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monik.Common.MonikReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerfCounter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerfCounter(PerfCounter other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerfCounter Clone() {
      return new PerfCounter(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PerfCounter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PerfCounter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PerfCounter other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Metric : pb::IMessage<Metric> {
    private static readonly pb::MessageParser<Metric> _parser = new pb::MessageParser<Metric>(() => new Metric());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monik.Common.MonikReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric(Metric other) : this() {
      name_ = other.name_;
      aggregation_ = other.aggregation_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric Clone() {
      return new Metric(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregation" field.</summary>
    public const int AggregationFieldNumber = 2;
    private global::Monik.Common.AggregationType aggregation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monik.Common.AggregationType Aggregation {
      get { return aggregation_; }
      set {
        aggregation_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Aggregation != other.Aggregation) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Aggregation != 0) hash ^= Aggregation.GetHashCode();
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Aggregation != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Aggregation);
      }
      if (Value != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Aggregation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Aggregation);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metric other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Aggregation != 0) {
        Aggregation = other.Aggregation;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            aggregation_ = (global::Monik.Common.AggregationType) input.ReadEnum();
            break;
          }
          case 25: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
