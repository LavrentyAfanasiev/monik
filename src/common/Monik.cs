// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monik.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Monik.Common {

  /// <summary>Holder for reflection information generated from monik.proto</summary>
  public static partial class MonikReflection {

    #region Descriptor
    /// <summary>File descriptor for monik.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonikReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgttb25pay5wcm90bxIIdHV0b3JpYWwiPgoJS2VlcEFsaXZlEg8KB2NyZWF0",
            "ZWQYASABKBISDgoGc291cmNlGAIgASgJEhAKCGluc3RhbmNlGAMgASgJIoAD",
            "CgNMb2cSDwoHY3JlYXRlZBgBIAEoEhImCgVsZXZlbBgCIAEoDjIXLnR1dG9y",
            "aWFsLkxvZy5MZXZlbFR5cGUSLAoIc2V2ZXJpdHkYAyABKA4yGi50dXRvcmlh",
            "bC5Mb2cuU2V2ZXJpdHlUeXBlEg4KBnNvdXJjZRgEIAEoCRIQCghpbnN0YW5j",
            "ZRgFIAEoCRIoCgZmb3JtYXQYBiABKA4yGC50dXRvcmlhbC5Mb2cuRm9ybWF0",
            "VHlwZRIMCgRib2R5GAcgASgJEgwKBHRhZ3MYCCABKAkiQQoJTGV2ZWxUeXBl",
            "EgoKBlNZU1RFTRAAEg8KC0FQUExJQ0FUSU9OEAESCQoFTE9HSUMQAhIMCghT",
            "RUNVUklUWRADIjsKDFNldmVyaXR5VHlwZRIICgRJTkZPEAASCwoHV0FSTklO",
            "RxABEgkKBUVSUk9SEAISCQoFRkFUQUwQAyIqCgpGb3JtYXRUeXBlEgkKBVBM",
            "QUlOEAASCAoESlNPThABEgcKA1hNTBACQg+qAgxNb25pay5Db21tb25iBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Monik.Common.KeepAlive), global::Monik.Common.KeepAlive.Parser, new[]{ "Created", "Source", "Instance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monik.Common.Log), global::Monik.Common.Log.Parser, new[]{ "Created", "Level", "Severity", "Source", "Instance", "Format", "Body", "Tags" }, null, new[]{ typeof(global::Monik.Common.Log.Types.LevelType), typeof(global::Monik.Common.Log.Types.SeverityType), typeof(global::Monik.Common.Log.Types.FormatType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class KeepAlive : pb::IMessage<KeepAlive> {
    private static readonly pb::MessageParser<KeepAlive> _parser = new pb::MessageParser<KeepAlive>(() => new KeepAlive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeepAlive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monik.Common.MonikReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAlive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAlive(KeepAlive other) : this() {
      created_ = other.created_;
      source_ = other.source_;
      instance_ = other.instance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAlive Clone() {
      return new KeepAlive(this);
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 1;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private string source_ = "";
    /// <summary>
    ///  Server, Role, Application, Service, etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instance" field.</summary>
    public const int InstanceFieldNumber = 3;
    private string instance_ = "";
    /// <summary>
    ///  Instance of the source: app on the server or cloud deployment, concrete instance of desktop application, etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Instance {
      get { return instance_; }
      set {
        instance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeepAlive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeepAlive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Created != other.Created) return false;
      if (Source != other.Source) return false;
      if (Instance != other.Instance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Instance.Length != 0) hash ^= Instance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Created != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Created);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Source);
      }
      if (Instance.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Instance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Created);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Instance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Instance);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeepAlive other) {
      if (other == null) {
        return;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Instance.Length != 0) {
        Instance = other.Instance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Created = input.ReadSInt64();
            break;
          }
          case 18: {
            Source = input.ReadString();
            break;
          }
          case 26: {
            Instance = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Log : pb::IMessage<Log> {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monik.Common.MonikReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      created_ = other.created_;
      level_ = other.level_;
      severity_ = other.severity_;
      source_ = other.source_;
      instance_ = other.instance_;
      format_ = other.format_;
      body_ = other.body_;
      tags_ = other.tags_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 1;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private global::Monik.Common.Log.Types.LevelType level_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monik.Common.Log.Types.LevelType Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 3;
    private global::Monik.Common.Log.Types.SeverityType severity_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monik.Common.Log.Types.SeverityType Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 4;
    private string source_ = "";
    /// <summary>
    ///  Server, Role, Application, Service, etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instance" field.</summary>
    public const int InstanceFieldNumber = 5;
    private string instance_ = "";
    /// <summary>
    ///  Instance of the source: app on the server or cloud deployment, concrete instance of desktop application, etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Instance {
      get { return instance_; }
      set {
        instance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 6;
    private global::Monik.Common.Log.Types.FormatType format_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monik.Common.Log.Types.FormatType Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 7;
    private string body_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 8;
    private string tags_ = "";
    /// <summary>
    ///  users tags or categories
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tags {
      get { return tags_; }
      set {
        tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Created != other.Created) return false;
      if (Level != other.Level) return false;
      if (Severity != other.Severity) return false;
      if (Source != other.Source) return false;
      if (Instance != other.Instance) return false;
      if (Format != other.Format) return false;
      if (Body != other.Body) return false;
      if (Tags != other.Tags) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Severity != 0) hash ^= Severity.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Instance.Length != 0) hash ^= Instance.GetHashCode();
      if (Format != 0) hash ^= Format.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (Tags.Length != 0) hash ^= Tags.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Created != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Created);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Level);
      }
      if (Severity != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Severity);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Source);
      }
      if (Instance.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Instance);
      }
      if (Format != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Format);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Body);
      }
      if (Tags.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Tags);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Created);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (Severity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Instance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Instance);
      }
      if (Format != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      if (Tags.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tags);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Severity != 0) {
        Severity = other.Severity;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Instance.Length != 0) {
        Instance = other.Instance;
      }
      if (other.Format != 0) {
        Format = other.Format;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      if (other.Tags.Length != 0) {
        Tags = other.Tags;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Created = input.ReadSInt64();
            break;
          }
          case 16: {
            level_ = (global::Monik.Common.Log.Types.LevelType) input.ReadEnum();
            break;
          }
          case 24: {
            severity_ = (global::Monik.Common.Log.Types.SeverityType) input.ReadEnum();
            break;
          }
          case 34: {
            Source = input.ReadString();
            break;
          }
          case 42: {
            Instance = input.ReadString();
            break;
          }
          case 48: {
            format_ = (global::Monik.Common.Log.Types.FormatType) input.ReadEnum();
            break;
          }
          case 58: {
            Body = input.ReadString();
            break;
          }
          case 66: {
            Tags = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Log message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LevelType {
        [pbr::OriginalName("SYSTEM")] System = 0,
        [pbr::OriginalName("APPLICATION")] Application = 1,
        [pbr::OriginalName("LOGIC")] Logic = 2,
        [pbr::OriginalName("SECURITY")] Security = 3,
      }

      public enum SeverityType {
        [pbr::OriginalName("INFO")] Info = 0,
        [pbr::OriginalName("WARNING")] Warning = 1,
        [pbr::OriginalName("ERROR")] Error = 2,
        [pbr::OriginalName("FATAL")] Fatal = 3,
      }

      public enum FormatType {
        [pbr::OriginalName("PLAIN")] Plain = 0,
        [pbr::OriginalName("JSON")] Json = 1,
        [pbr::OriginalName("XML")] Xml = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
